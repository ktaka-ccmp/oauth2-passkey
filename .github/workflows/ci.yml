name: CI

on:
  push:
    branches: [ master, develop, docs ]
  pull_request:
    branches: [ master, develop, docs ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: false
          - rust: nightly
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build core library
      run: cargo build --verbose --manifest-path oauth2-passkey/Cargo.toml

    - name: Build axum integration
      run: cargo build --verbose --manifest-path oauth2-passkey-axum/Cargo.toml --all-features

    - name: Test core library
      run: cargo test --verbose --manifest-path oauth2-passkey/Cargo.toml
      env:
        ORIGIN: "http://localhost:3000"
        GENERIC_DATA_STORE_TYPE: "sqlite"
        GENERIC_DATA_STORE_URL: ":memory:"
        GENERIC_CACHE_STORE_TYPE: "memory"
        GENERIC_CACHE_STORE_URL: ""
        GOOGLE_CLIENT_ID: "test-client-id"
        GOOGLE_CLIENT_SECRET: "test-client-secret"

    - name: Test axum integration (all features)
      run: cargo test --verbose --manifest-path oauth2-passkey-axum/Cargo.toml --all-features
      env:
        ORIGIN: "http://localhost:3000"
        GENERIC_DATA_STORE_TYPE: "sqlite"
        GENERIC_DATA_STORE_URL: ":memory:"
        GENERIC_CACHE_STORE_TYPE: "memory"
        GENERIC_CACHE_STORE_URL: ""
        GOOGLE_CLIENT_ID: "test-client-id"
        GOOGLE_CLIENT_SECRET: "test-client-secret"

    - name: Test axum integration (no default features)
      run: cargo test --verbose --manifest-path oauth2-passkey-axum/Cargo.toml --no-default-features
      env:
        ORIGIN: "http://localhost:3000"
        GENERIC_DATA_STORE_TYPE: "sqlite"
        GENERIC_DATA_STORE_URL: ":memory:"
        GENERIC_CACHE_STORE_TYPE: "memory"
        GENERIC_CACHE_STORE_URL: ""
        GOOGLE_CLIENT_ID: "test-client-id"
        GOOGLE_CLIENT_SECRET: "test-client-secret"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-integration-
          ${{ runner.os }}-cargo-

    - name: Test with PostgreSQL
      run: cargo test --verbose --manifest-path oauth2-passkey/Cargo.toml
      env:
        ORIGIN: "http://localhost:3000"
        GENERIC_DATA_STORE_TYPE: "postgres"
        GENERIC_DATA_STORE_URL: "postgresql://postgres:postgres@localhost:5432/testdb"
        GENERIC_CACHE_STORE_TYPE: "redis"
        GENERIC_CACHE_STORE_URL: "redis://localhost:6379"
        GOOGLE_CLIENT_ID: "test-client-id"
        GOOGLE_CLIENT_SECRET: "test-client-secret"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-docs-
          ${{ runner.os }}-cargo-

    - name: Build documentation
      run: |
        cargo doc --no-deps --manifest-path oauth2-passkey/Cargo.toml
        cargo doc --no-deps --manifest-path oauth2-passkey-axum/Cargo.toml --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust 1.80
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.70"

    - name: Check MSRV compatibility
      run: |
        cargo check --manifest-path oauth2-passkey/Cargo.toml
        cargo check --manifest-path oauth2-passkey-axum/Cargo.toml --all-features
