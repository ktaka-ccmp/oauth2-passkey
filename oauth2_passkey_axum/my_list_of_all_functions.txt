**oauth2_passkey_axum/src/admin/default.rs:**
  pub(super) fn router() -> Router<()> {}
  async fn list_users(auth_user: AuthUser) -> Result<Html<String>, (StatusCode, String)> {}
  pub(super) async fn delete_user_account_handler( auth_user: AuthUser, ExtractJson(payload): ExtractJson<DeleteUserRequest>, ) -> Result<StatusCode, (StatusCode, String)> {}
  async fn delete_passkey_credential( auth_user: AuthUser, Path(credential_id): Path<String>, ExtractJson(payload): ExtractJson<PageUserContext>, ) -> Result<StatusCode, (StatusCode, String)> {}
  async fn delete_oauth2_account( auth_user: AuthUser, Path((provider, provider_user_id)): Path<(String, String)>, ExtractJson(payload): ExtractJson<PageUserContext>, ) -> Result<StatusCode, (StatusCode, String)> {}
  pub(super) async fn update_admin_status_handler( auth_user: AuthUser, ExtractJson(payload): ExtractJson<UpdateAdminStatusRequest>, ) -> Result<StatusCode, (StatusCode, String)> {}
  fn test_delete_user_request_struct() {}
  async fn test_delete_user_account_handler_unauthorized() {}
  fn test_page_user_context_struct() {}
  fn test_update_admin_status_request_struct() {}
  async fn test_update_admin_status_handler_unauthorized() {}
  fn test_router_creation() {}
  fn test_user_list_template_struct() {}

**oauth2_passkey_axum/src/admin/mod.rs:**
  pub(super) fn router() -> Router {}

**oauth2_passkey_axum/src/admin/optional.rs:**
  pub(crate) fn router() -> Router<()> {}
  fn new( user: DbUser, csrf_token: String, passkey_credentials: Vec<TemplateCredential>, oauth2_accounts: Vec<TemplateAccount>, o2p_route_prefix: String, ) -> Self {}
  async fn user_summary(auth_user: AuthUser, user_id: Path<String>) -> impl IntoResponse {}
  async fn serve_admin_user_js() -> Response {}
  async fn serve_admin_user_css() -> Response {}
  fn format_date_tz(date: &DateTime<Utc>, timezone_name: &str) -> String {}
  fn test_format_date_tz_jst() {}
  fn test_format_date_tz_utc() {}
  fn test_format_date_tz_unknown_timezone() {}
  fn test_user_summary_template_new() {}
  fn test_router_creation() {}

**oauth2_passkey_axum/src/config.rs:**
  fn get_login_url(route_prefix: &str, env_value: Option<&str>) -> String {}
  fn get_summary_url(route_prefix: &str, env_value: Option<&str>) -> String {}
  fn get_admin_url(route_prefix: &str, env_value: Option<&str>) -> String {}
  fn get_redirect_anon(env_value: Option<&str>) -> String {}
  fn get_respond_with_x_csrf_token(env_value: Option<&str>) -> bool {}
  fn test_login_url_default() {}
  fn test_login_url_custom() {}
  fn test_summary_url_default() {}
  fn test_summary_url_custom() {}
  fn test_admin_url_default() {}
  fn test_admin_url_custom() {}
  fn test_redirect_anon_default() {}
  fn test_redirect_anon_custom() {}
  fn test_respond_with_x_csrf_token_default() {}
  fn test_respond_with_x_csrf_token_false() {}
  fn test_respond_with_x_csrf_token_true() {}
  fn test_respond_with_x_csrf_token_other_value() {}

**oauth2_passkey_axum/src/error.rs:**
  fn into_response_error(self) -> Result<T, (StatusCode, String)>;
  fn into_response_error(self) -> Result<T, (StatusCode, String)> {}
  fn into_response_error(self) -> Result<T, (StatusCode, String)> {}
  fn test_coordination_error_unauthorized() {}
  fn test_coordination_error_no_content() {}
  fn test_coordination_error_bad_request() {}
  fn test_coordination_error_not_found() {}
  fn test_coordination_error_invalid_response_mode() {}
  fn test_success_case() {}
  fn test_http_error() {}

**oauth2_passkey_axum/src/middleware.rs:**
  fn add_csrf_header(mut response: Response, csrf_token: &str) -> Response {}
  fn handle_auth_error(err: SessionError, req: &Request, redirect_on_error: bool) -> Response {}
  pub async fn is_authenticated_401(mut req: Request, next: Next) -> Response {}
  pub async fn is_authenticated_redirect(mut req: Request, next: Next) -> Response {}
  pub async fn is_authenticated_user_401(mut req: Request, next: Next) -> Response {}
  pub async fn is_authenticated_user_redirect(mut req: Request, next: Next) -> Response {}
  fn test_add_csrf_header_when_enabled() {}
  fn test_add_csrf_header_with_invalid_token() {}
  fn test_handle_auth_error_csrf_error_with_redirect() {}
  fn test_handle_auth_error_csrf_error_without_redirect() {}
  fn test_handle_auth_error_other_error_with_redirect() {}
  fn test_handle_auth_error_other_error_without_redirect() {}
  fn test_handle_auth_error_post_request_with_redirect() {}
  fn test_middleware_signatures() {}

**oauth2_passkey_axum/src/oauth2.rs:**
  pub(super) fn router() -> Router {}
  async fn popup_close( Query(params): Query<HashMap<String, String>>, ) -> Result<Html<String>, (StatusCode, String)> {}
  async fn serve_oauth2_js() -> Result<Response, (StatusCode, String)> {}
  async fn google_auth( auth_user: Option<AuthUser>, headers: HeaderMap, Query(params): Query<HashMap<String, String>>, ) -> Result<(HeaderMap, Redirect), (StatusCode, String)> {}
  async fn get_authorized( Query(query): Query<AuthResponse>, TypedHeader(cookies): TypedHeader<headers::Cookie>, headers: HeaderMap, ) -> Result<(HeaderMap, Redirect), (StatusCode, String)> {}
  async fn post_authorized( headers: HeaderMap, TypedHeader(cookies): TypedHeader<headers::Cookie>, Form(form): Form<AuthResponse>, ) -> Result<(HeaderMap, Redirect), (StatusCode, String)> {}
  async fn list_oauth2_accounts( auth_user: AuthUser, ) -> Result<Json<Vec<OAuth2Account>>, (StatusCode, String)> {}
  async fn delete_oauth2_account( auth_user: AuthUser, Path((provider, provider_user_id)): Path<(String, String)>, ) -> Result<StatusCode, (StatusCode, String)> {}
  fn test_router() {}
  async fn test_serve_oauth2_js() {}

**oauth2_passkey_axum/src/passkey.rs:**
  pub(super) fn router() -> Router {}
  fn router_register() -> Router {}
  fn router_auth() -> Router {}
  pub fn passkey_well_known_router() -> Router {}
  async fn handle_start_registration( auth_user: Option<AuthUser>, Json(request): Json<RegistrationStartRequest>, ) -> Result<Json<RegistrationOptions>, (StatusCode, String)> {}
  async fn handle_finish_registration( auth_user: Option<AuthUser>, Json(reg_data): Json<RegisterCredential>, ) -> Result<(HeaderMap, String), (StatusCode, String)> {}
  async fn handle_start_authentication( Json(body): Json<Value>, ) -> Result<Json<AuthenticationOptions>, (StatusCode, String)> {}
  async fn handle_finish_authentication( Json(auth_response): Json<AuthenticatorResponse>, ) -> Result<(HeaderMap, String), (StatusCode, String)> {}
  async fn serve_passkey_js() -> Response {}
  async fn conditional_ui() -> impl IntoResponse {}
  async fn serve_conditional_ui_js() -> Response {}
  async fn list_passkey_credentials( auth_user: AuthUser, ) -> Result<Json<Vec<PasskeyCredential>>, (StatusCode, String)> {}
  async fn delete_passkey_credential( auth_user: AuthUser, Path(credential_id): Path<String>, ) -> Result<StatusCode, (StatusCode, String)> {}
  async fn serve_related_origin() -> Response {}
  async fn update_passkey_credential( auth_user: AuthUser, Json(payload): Json<UpdateCredentialUserDetailsRequest>, ) -> Result<Json<serde_json::Value>, (StatusCode, String)> {}
  async fn test_serve_passkey_js() {}
  async fn test_serve_conditional_ui_js() {}
  async fn test_serve_related_origin() {}
  async fn test_conditional_ui() {}
  fn test_router_configuration() {}
  async fn test_list_passkey_credentials_handler() {}
  async fn test_update_passkey_credential_handler() {}

**oauth2_passkey_axum/src/router.rs:**
  pub fn oauth2_passkey_router() -> Router {}
  fn test_oauth2_passkey_router() {}
  fn test_router_structure() {}

**oauth2_passkey_axum/src/session.rs:**
  fn new(method: Method) -> Self {}
  fn into_response_with_method(self) -> Response {}
  fn into_response(self) -> Response {}
  fn from(auth_user: &AuthUser) -> Self {}
  fn from(session_user: SessionUser) -> Self {}
  async fn from_request_parts(parts: &mut Parts, _: &B) -> Result<Self, Self::Rejection> {}
  async fn from_request_parts( parts: &mut Parts, state: &B, ) -> Result<Option<Self>, Self::Rejection> {}
  fn test_from_session_user_to_auth_user() {}
  fn test_from_auth_user_to_session_user() {}
  fn test_auth_redirect_new() {}
  fn test_auth_redirect_into_response_with_method() {}

**oauth2_passkey_axum/src/user/default.rs:**
  pub(crate) fn router() -> Router<()> {}
  async fn logout( TypedHeader(cookies): TypedHeader<headers::Cookie>, Query(params): Query<RedirectQuery>, ) -> impl IntoResponse {}
  pub(super) async fn update_user_account_handler( auth_user: AuthUser, ExtractJson(payload): ExtractJson<UpdateUserRequest>, ) -> Result<Json<Value>, (StatusCode, String)> {}
  pub(super) async fn delete_user_account_handler( auth_user: AuthUser, ExtractJson(payload): ExtractJson<DeleteUserRequest>, ) -> Result<Json<Value>, (StatusCode, String)> {}
  async fn test_update_user_account_handler_id_mismatch() {}
  async fn test_delete_user_account_handler_id_mismatch() {}
  fn test_router() {}
  fn test_logout_signature() {}
  fn test_redirect_query_struct() {}
  fn test_update_user_request_struct() {}
  fn test_delete_user_request_struct() {}

**oauth2_passkey_axum/src/user/mod.rs:**
  pub(super) fn router() -> Router {}

**oauth2_passkey_axum/src/user/optional.rs:**
  pub(crate) fn router() -> Router<()> {}
  async fn login(user: Option<AuthUser>) -> Result<Response, (StatusCode, String)> {}
  fn new( user: AuthUser, passkey_credentials: Vec<TemplateCredential>, oauth2_accounts: Vec<TemplateAccount>, o2p_route_prefix: String, o2p_redirect_anon: String, ) -> Self {}
  async fn user_info(auth_user: Option<AuthUser>) -> Result<Json<Value>, (StatusCode, String)> {}
  async fn csrf_token(auth_user: AuthUser) -> Result<Json<Value>, (StatusCode, String)> {}
  async fn summary(auth_user: AuthUser) -> Result<Html<String>, (StatusCode, String)> {}
  async fn serve_summary_js() -> Response {}
  async fn serve_summary_css() -> Response {}
  fn format_date_tz(date: &DateTime<Utc>, timezone_name: &str) -> String {}
  fn test_format_date_tz_jst() {}
  fn test_format_date_tz_pst() {}
  fn test_format_date_tz_utc() {}
  fn test_format_date_tz_unknown_timezone() {}
  fn test_router_creation() {}
