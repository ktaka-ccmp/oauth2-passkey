<!DOCTYPE html>
<html>
<head>
    <title>User Summary</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Embed obfuscated user context for session boundary verification -->
    <script>
        // Page context for session boundary protection
        const PAGE_USER_CONTEXT = "{{ obfuscated_user_id }}";
    </script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            width: 95%;
            margin: 0 auto;
            padding: 15px;
            line-height: 1.6;
            box-sizing: border-box;
        }
        /* Apply border-box to all elements for consistent sizing */
        *, *:before, *:after {
            box-sizing: inherit;
        }
        h1, h2 {
            color: #333;
        }
        .section {
            margin-bottom: 30px;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            width: 100%;
            box-sizing: border-box;
        }
        .section-title {
            background-color: #f5f5f5;
            padding: 10px;
            margin: -15px -15px 15px -15px;
            border-bottom: 1px solid #ddd;
            border-radius: 5px 5px 0 0;
        }
        .item {
            background-color: #f9f9f9;
            border-left: 4px solid #4285f4;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 3px;
            width: 100%;
            box-sizing: border-box;
            word-break: break-word;
        }
        .item-detail {
            margin: 5px 0;
        }
        .link-button {
            display: inline-block;
            background-color: #4285f4;
            color: white;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 4px;
            margin-top: 10px;
            font-weight: bold;
        }
        .link-button:hover {
            background-color: #3367d6;
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: #4285f4;
            text-decoration: none;
        }
        .back-link:hover {
            text-decoration: underline;
        }
        .user-passkeys {
            margin-top: 0.5rem;
        }
        .user-accounts {
            margin-top: 0.5rem;
        }
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .page-header h1 {
            margin: 0;
        }
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        .section-header .section-title {
            margin: 0;
            flex: 1;
        }
        .action-button {
            background-color: #4285f4;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 15px;
            white-space: nowrap;
            min-height: 36px;
        }
        .action-button:hover {
            background-color: #3367d6;
        }
        
        .delete-button {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .delete-button:hover {
            background-color: #d32f2f;
        }

        .edit-button {
            background-color: #4285f4;
            color: white;
            border: none;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
        }

        .edit-button:hover {
            background-color: #3367d6;
        }
        
        .created-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .secondary-button {
            background-color: #95a5a6;
        }

        .secondary-button:hover {
            background-color: #7f8c8d;
        }

        /* Modal styles */
        .credential-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .credential-modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 5px;
        }

        .credential-close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .credential-close:hover,
        .credential-close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Keep the original modal styles for backward compatibility but make them less specific */
        .modal {
            display: none;
        }

        /* Responsive adjustments */
        @media screen and (max-width: 600px) {
            html, body {
                font-size: 16px;
                overflow-x: hidden;
                width: 100%;
            }
            h1 {
                font-size: 1.8rem;
            }
            h2 {
                font-size: 1.5rem;
            }
            .page-header {
                margin-bottom: 15px;
            }
            body {
                padding: 8px;
                width: 100%;
                max-width: 100%;
            }
            .page-header, .section, .item {
                width: 100%;
            }
            .section {
                padding: 12px;
                width: 100%;
                margin-bottom: 20px;
                max-width: none;
            }
            .section-title {
                padding: 10px;
                margin: -12px -12px 12px -12px;
                font-size: 1.3rem;
            }
            .item {
                padding: 10px;
                margin-bottom: 12px;
                width: 100%;
                max-width: 100%;
            }
            .action-button {
                padding: 8px 12px;
                font-size: 1rem;
                min-height: 40px;
            }
        }
    </style>
</head>
<body>
    <div class="page-header">
        <h1>User Summary</h1>
        <div class="header-buttons">
            <button onclick="DeleteAccount()" class="action-button delete-button">Delete Account</button>
            <button onclick="Logout()" class="action-button">Logout</button>
        </div>
    </div>

    <!-- User Information Section -->
    <div class="section">
        <div class="section-header">
            <h2 class="section-title">User Information</h2>
            <button onclick="toggleEditUserForm()" class="action-button">Edit Profile</button>
        </div>
        <div class="item" id="user-info-display">
            <div class="item-detail"><strong>User ID:</strong> {{ user.id }}</div>
            <div class="item-detail"><strong>Account:</strong> <span id="display-account">{{ user.account }}</span></div>
            <div class="item-detail"><strong>Label:</strong> <span id="display-label">{{ user.label }}</span></div>
            <div class="item-detail"><strong>Created:</strong> {{ user.created_at }}</div>
            <!--
            <div class="item-detail"><strong>Updated:</strong> {{ user.updated_at }}</div>
            -->
        </div>
        <div class="item" id="user-edit-form" style="display: none;">
            <form id="update-user-form">
                <input type="hidden" id="edit-user-id" value="{{ user.id }}">
                <div class="form-group">
                    <label for="edit-account">Account:</label>
                    <input type="text" id="edit-account" value="{{ user.account }}" class="form-input">
                </div>
                <div class="form-group">
                    <label for="edit-label">Label:</label>
                    <input type="text" id="edit-label" value="{{ user.label }}" class="form-input">
                </div>
                <div class="form-actions">
                    <button type="button" onclick="updateUserAccount()" class="action-button">Save</button>
                    <button type="button" onclick="toggleEditUserForm()" class="action-button secondary-button">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Passkey Credentials Section -->
    <div class="section">
        <div class="section-header">
            <h2 class="section-title">Passkey Credentials</h2>
            <button onclick="showRegistrationModal('add_to_existing_user')" class="action-button">Add New Passkey</button>
        </div>
        {% if passkey_credentials.is_empty() %}
            <p>You don't have any passkey credentials yet.</p>
        {% else %}
            {% for credential in passkey_credentials %}
                <div class="item" data-credential-id="{{ credential.credential_id }}">
                    <!--
                    <div class="item-detail"><strong>User Handle:</strong> {{ credential.user_handle }}</div>
                    <div class="item-detail"><strong>Credential ID:</strong> {{ credential.credential_id }}</div>
                    -->
                    <div class="item-detail"><strong>User Name:</strong> <span id="credential-name-{{ credential.credential_id }}">{{ credential.user_name }}</span></div>
                    <div class="item-detail"><strong>Display Name:</strong> <span id="credential-display-name-{{ credential.credential_id }}">{{ credential.user_display_name }}</span></div>
                    <div class="item-detail created-row">
                        <span><strong>Created:</strong> {{ credential.created_at }}</span>
                        <div>
                            <button onclick="openUpdateCredentialModal('{{ credential.credential_id }}', '{{ credential.user_name }}', '{{ credential.user_display_name }}', '{{ credential.user_handle }}')" class="edit-button">Edit</button>
                            <button onclick="deletePasskeyCredential('{{ credential.credential_id }}', '{{ credential.user_handle }}')" class="delete-button">Delete</button>
                        </div>
                    </div>
                    <!--
                    <div><button onclick="synchronizeCredentialsWithSignalUnknown('{{ credential.credential_id }}')">Synchronize Credentials with Signal Unknown</button></div>
                    -->
                    <!--
                    <div class="item-detail"><strong>Credential ID:</strong> {{ credential.credential_id }}</div>
                    <div class="item-detail"><strong>Updated:</strong> {{ credential.updated_at }}</div>
                    <div class="item-detail"><strong>User ID:</strong> {{ credential.user_id }}</div>
                    <div class="item-detail"><strong>User Handle:</strong> {{ credential.user_handle }}</div>
                    <div class="item-detail"><strong>Counter:</strong> {{ credential.counter }}</div>
                    -->
                </div>
            {% endfor %}
        {% endif %}
    </div>

    <!-- OAuth2 Accounts Section -->
    <div class="section">
        <div class="section-header">
            <h2 class="section-title">OAuth2 Accounts</h2>
            <button onclick="oauth2.openPopup('add_to_existing_user', PAGE_USER_CONTEXT)" class="action-button">Add New OAuth2 Account</button>
        </div>
        {% if oauth2_accounts.is_empty() %}
            <p>You don't have any linked OAuth2 accounts yet.</p>
        {% else %}
            {% for account in oauth2_accounts %}
                <div class="item">
                    {% if account.picture != "" %}
                    <div class="account-picture">
                        <img src="{{ account.picture }}" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;">
                    </div>
                    {% endif %}
                    <!--
                    <div class="item-detail"><strong>ID:</strong> {{ account.id }}</div>
                    <div class="item-detail"><strong>User ID:</strong> {{ account.user_id }}</div>
                    <div class="item-detail"><strong>Provider:</strong> {{ account.provider }}</div>
                    <div class="item-detail"><strong>Provider User ID:</strong> {{ account.provider_user_id }}</div>
                    {% if account.metadata_str != "" %}
                        <div class="item-detail"><strong>Metadata:</strong> {{ account.metadata_str }}</div>
                    {% endif %}
                    <div class="item-detail"><strong>Updated:</strong> {{ account.updated_at }}</div>
                    -->
                    {% if account.email != "" %}
                        <div class="item-detail"><strong>Email:</strong> {{ account.email }}</div>
                    {% endif %}
                    <div class="item-detail"><strong>Name:</strong> {{ account.name }}</div>
                    <div class="item-detail created-row">
                        <span><strong>Created:</strong> {{ account.created_at }}</span>
                        <button onclick="unlinkOAuth2Account('{{ account.provider }}', '{{ account.provider_user_id }}')" class="delete-button">Unlink</button>
                    </div>
                </div>
            {% endfor %}
        {% endif %}
    </div>

    <!-- Update Credential Modal -->
    <div id="update-credential-modal" class="credential-modal" style="display: none;">
        <div class="credential-modal-content">
            <span class="credential-close" onclick="closeUpdateCredentialModal()">&times;</span>
            <h2>Update Credential Details</h2>
            <form id="update-credential-form">
                <input type="hidden" id="update-credential-id" name="credential-id">
                <input type="hidden" id="update-credential-user-handle" name="credential-user-handle">
                <div class="form-group">
                    <label for="update-credential-name">Name:</label>
                    <input type="text" id="update-credential-name" name="name" required class="form-input">
                </div>
                <div class="form-group">
                    <label for="update-credential-display-name">Display Name:</label>
                    <input type="text" id="update-credential-display-name" name="display-name" required class="form-input">
                </div>
                <div class="form-actions">
                    <button type="button" onclick="updateCredentialDetails()" class="action-button">Update</button>
                    <button type="button" onclick="closeUpdateCredentialModal()" class="action-button secondary-button">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global error handler to catch and log any uncaught errors
        window.addEventListener('error', function(event) {
            console.error('Uncaught error:', event.error);
        });

        function Logout() {
            window.location.href = "{{o2p_route_prefix}}/oauth2/logout";
        }

        function toggleEditUserForm() {
            const displayDiv = document.getElementById('user-info-display');
            const editForm = document.getElementById('user-edit-form');

            if (editForm.style.display === 'none') {
                displayDiv.style.display = 'none';
                editForm.style.display = 'block';
            } else {
                displayDiv.style.display = 'block';
                editForm.style.display = 'none';
            }
        }

        function updateUserAccount() {
            const userId = document.getElementById('edit-user-id').value;
            const account = document.getElementById('edit-account').value;
            const label = document.getElementById('edit-label').value;

            fetch(`{{o2p_route_prefix}}/user/update`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    user_id: userId,
                    account: account,
                    label: label
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
                return response.json();
            })
            .then(data => {
                // Update the display with the new values
                document.getElementById('display-account').textContent = data.account;
                document.getElementById('display-label').textContent = data.label;

                // Show a success message
                alert('Profile updated successfully');

                // Toggle back to display view
                toggleEditUserForm();
            })
            .catch(error => {
                alert(`Error updating profile: ${error.message}`);
            });
        }

        function DeleteAccount() {
            // Include account name in confirmation for better verification
            const accountName = "{{user.account}}";
            const userId = "{{user.id}}";
            if (confirm(`Are you sure you want to delete your account "${accountName}"? This action cannot be undone and will delete all your data including OAuth2 accounts and passkey credentials.`)) {
                // Delete the account on the server first
                fetch(`${O2P_ROUTE_PREFIX}/user/delete`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ user_id: userId })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            throw new Error(`Failed to delete account: ${text}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // After successful server-side deletion, notify the authenticator about each credential
                    console.log('Account deleted successfully on server side');

                    // Check if we have credential IDs to notify about
                    const credentialIds = data.credential_ids || [];
                    if (credentialIds.length > 0) {
                        console.log(`Notifying authenticator about ${credentialIds.length} deleted credentials`);

                        // Create a chain of promises to notify the authenticator about each credential
                        let notificationChain = Promise.resolve();

                        // Process each credential sequentially
                        credentialIds.forEach(credentialId => {
                            notificationChain = notificationChain.then(() => {
                                return synchronizeCredentialsWithSignalUnknown(credentialId);
                            });
                        });

                        return notificationChain;
                    } else {
                        console.log('No passkey credentials to notify about');
                        return Promise.resolve();
                    }
                })
                .then(() => {
                    alert('Your account has been deleted. You will now be logged out.');
                    // Redirect to logout to clear the session
                    window.location.reload();
                })
                .catch(error => {
                    alert(`Error: ${error.message}`);
                });
            }
        }

        function unlinkOAuth2Account(provider, providerUserId) {
            if (confirm('Are you sure you want to unlink this OAuth2 account?')) {
                fetch(`${O2P_ROUTE_PREFIX}/oauth2/accounts/${provider}/${providerUserId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                })
                .then(response => {
                    if (response.ok) {
                        // Refresh the page to show updated account list
                        window.location.reload();
                    } else {
                        response.text().then(text => {
                            alert(`Failed to unlink account: ${text}`);
                        });
                    }
                })
                .catch(error => {
                    alert(`Error: ${error.message}`);
                });
            }
        }
        
        // Function to synchronize credentials with the authenticator using signalAllAcceptedCredentials
        // This helps keep the authenticator's credential store in sync with the server
        // Takes the user handle of the deleted credential as a parameter
        function synchronizeCredentials(userHandle) {
            // Check if the WebAuthn API and signalAllAcceptedCredentials are available
            if (!window.PublicKeyCredential ||
                typeof window.PublicKeyCredential.signalAllAcceptedCredentials !== 'function') {
                console.log('WebAuthn credential management API not available or not supported');
                return Promise.resolve(); // Return resolved promise for chaining
            }

            // Exit early if no user handle is provided
            if (!userHandle) {
                console.log('No user handle provided, skipping credential synchronization');
                return Promise.resolve();
            }

            // Encode the user handle in base64url format
            const userIdBytes = new TextEncoder().encode(userHandle);
            const userIdBase64Url = arrayBufferToBase64URL(userIdBytes.buffer);

            // Signal all accepted credentials with an empty array
            // This tells the authenticator that no credentials are valid for this user and RP
            return window.PublicKeyCredential.signalAllAcceptedCredentials({
                rpId: window.location.hostname,
                userId: userIdBase64Url,
                allAcceptedCredentialIds: [] // Empty array = no valid credentials
            })
            .then(() => {
                console.log('Successfully signaled credential deletion to authenticator');
            })
            .catch(err => {
                console.warn('Error during credential synchronization:', err);
            });
        }

        // Function to synchronize credentials with the authenticator using signalUnknownCredential
        // This is an alternative approach for testing purposes
        // Takes the credential ID of the deleted credential as a parameter
        function synchronizeCredentialsWithSignalUnknown(credentialId) {
            try {
                // Check if the WebAuthn API is available
                if (!window.PublicKeyCredential) {
                    console.log('WebAuthn credential management API not available');
                    return Promise.resolve();
                }

                console.log('PublicKeyCredential is available');

                // Check if signalUnknownCredential is available
                if (typeof window.PublicKeyCredential.signalUnknownCredential !== 'function') {
                    console.log('signalUnknownCredential API not supported in this browser');
                    return Promise.resolve();
                }

                console.log('signalUnknownCredential API is available');

                // Signal the unknown credential to the authenticator
                return window.PublicKeyCredential.signalUnknownCredential({
                    rpId: window.location.hostname,
                    credentialId: credentialId
                })
                .then(() => {
                    console.log('Successfully signaled unknown credential to authenticator. rpId:', window.location.hostname, "credentialId:", credentialId);
                })
                .catch(err => {
                    console.warn('Error signaling unknown credential:', err);
                    return Promise.resolve(); // Return a resolved promise to allow chaining
                });
            } catch (err) {
                console.warn('Unexpected error during credential synchronization with signalUnknown:', err);
                return Promise.resolve(); // Return a resolved promise to allow chaining
            }
        }

        function deletePasskeyCredential(credentialId, userHandle) {
            if (confirm('Are you sure you want to unlink this passkey credential?')) {
                fetch(`${O2P_ROUTE_PREFIX}/passkey/credentials/${credentialId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                })
                .then(response => {
                    if (response.ok) {
                        // After successful deletion, synchronize credentials with the authenticator
                        // Pass the user handle of the deleted credential for accurate synchronization
                        // return synchronizeCredentials(userHandle);
                        return synchronizeCredentialsWithSignalUnknown(credentialId);
                    } else {
                        return response.text().then(text => {
                            throw new Error(`Failed to unlink passkey credential: ${text}`);
                        });
                    }
                })
                .then(() => {
                    // Refresh the page to show updated credential list
                    window.location.reload();
                })
                .catch(error => {
                    alert(`Error: ${error.message}`);
                });
            }
        }

        // Function to open the update credential modal
        function openUpdateCredentialModal(credentialId, name, displayName, userHandle) {
            document.getElementById('update-credential-id').value = credentialId;
            document.getElementById('update-credential-name').value = name || '';
            document.getElementById('update-credential-display-name').value = displayName || '';
            document.getElementById('update-credential-user-handle').value = userHandle || '';
            document.getElementById('update-credential-modal').style.display = 'block';
        }

        // Function to close the update credential modal
        function closeUpdateCredentialModal() {
            document.getElementById('update-credential-modal').style.display = 'none';
        }

        // Close the modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('update-credential-modal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        };

        function updateCredentialDetails() {
            const credentialId = document.getElementById('update-credential-id').value;
            const name = document.getElementById('update-credential-name').value;
            const displayName = document.getElementById('update-credential-display-name').value;
            const userHandle = document.getElementById('update-credential-user-handle').value;

            console.log('Updating credential:', credentialId);
            console.log('New name:', name);
            console.log('New display name:', displayName);
            console.log('User handle:', userHandle);

            fetch('{{o2p_route_prefix}}/passkey/credential/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    credential_id: credentialId,
                    name: name,
                    display_name: displayName,
                    user_handle: userHandle
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update credential');
                }
                return response.json();
            })
            .then(data => {
                console.log('Update successful:', data);

                // Update the UI
                document.getElementById(`credential-name-${credentialId}`).textContent = name;
                document.getElementById(`credential-display-name-${credentialId}`).textContent = displayName;

                // Signal the update to the authenticator
                signalCurrentUserDetails({
                    credentialId: credentialId,
                    userHandle: userHandle,
                    name: name,
                    displayName: displayName
                });

                closeUpdateCredentialModal();
            })
            .catch(error => {
                console.error('Error updating credential:', error);
                alert('Failed to update credential: ' + error.message);
            });
        }

        /**
         * Update the user details for a credential in the authenticator
         * @param {Object} options - The options for updating user details
         * @param {string} options.credentialId - The credential ID
         * @param {string} options.userHandle - The user handle
         * @param {string} options.name - The updated name
         * @param {string} options.displayName - The updated display name
         */
        async function signalCurrentUserDetails(options) {
            try {
                console.log('signalCurrentUserDetails called with options:', options);

                if (!window.PublicKeyCredential || 
                    typeof window.PublicKeyCredential.signalCurrentUserDetails !== 'function') {
                    console.warn('signalCurrentUserDetails is not supported in this browser');
                    return;
                }

                // Get the current domain
                const rpId = window.location.hostname;
                console.log('Using rpId:', rpId);

                const signalOptions = {
                    rpId: rpId,
                    userId: options.userHandle,
                    name: options.name,
                    displayName: options.displayName
                };

                console.log('Calling PublicKeyCredential.signalCurrentUserDetails with:', signalOptions);

                await PublicKeyCredential.signalCurrentUserDetails(signalOptions);

                console.log('Successfully updated user details in authenticator');
                return true;
            } catch (error) {
                console.error('Error updating user details in authenticator:', error);
                // Don't throw the error - this is a non-critical operation
                return false;
            }
        }
    </script>

    <script src="{{o2p_route_prefix}}/oauth2/oauth2.js"></script>
    <script src="{{o2p_route_prefix}}/passkey/passkey.js"></script>
    <script>
        const oauth2 = initOAuth2Popup();
        const O2P_ROUTE_PREFIX = '{{o2p_route_prefix}}';
    </script>

    <a href="/" class="back-link">← Back to Home</a>
</body>
</html>
